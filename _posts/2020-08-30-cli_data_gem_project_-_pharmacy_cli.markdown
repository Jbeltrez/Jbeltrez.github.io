---
layout: post
title:      "CLI DATA GEM PROJECT - PHARMACY CLI."
date:       2020-08-30 19:00:54 +0000
permalink:  cli_data_gem_project_-_pharmacy_cli
---




One of the biggest takeaways thus far has been my new view on Ruby objects and how my understanding of them changed in the most timely fashion. My relationship with Ruby objects has been like a child who cannot stand their parents when they are young but loving them more than ever at age 30. Or like not realizing what you have until it’s gone. Hopefully you get the point and hopefully at some point I'm better at programming than I am at making analogies. I was intimidated by ruby objects, despised them. I lost sleep, weight and sanity to ruby objects. I hit a low point in putting together my project and in my darkest hour when I was ready to give it all up I saw something glisten from just the corner of my eye. On closer inspection I realized it was the Crown Jewels of the ruby language: objects. I really believe that in that beleaguered moment is  when everything made sense (well not everything). But I felt like I had finally tied together everything I learned in the past two months. Yes I learned iterators, data types, terminal stuff etc. but I feel like I finally learned the beauty of the Ruby language. 

I began writing the code I wish I had, and with Ruby, your code wishes can always come true someway somehow. I wish user input could be passed in as an argument for object instantiation. I wish I had a variable that was equal to the return value of a method that made an Api call. I wish I had a hash that I could use to set properties for my prescription objects. 

I think the feeling of being thrown off the deep end with a completely blank file at the start of this project removed a lot of the thinking or the “trying to make sense of what the hell was going on” feeling. I felt very instinctual in my movements and I was very surprised with a lot of the “doing” I was doing. I went crazy with the comments. I pseudocoded more than I ever had.  The more I commented the more ideas I had. So the more ideas I had the more I would just write out different methods - I would write out method signature and any code I thought would be useful. A lot of times I would write out a method more than one way - a practice that contributed to more of the doing and also helped me to simplify my methods.  Needless to say now I want to write poems on ruby objects. 

At first, getting my data from my api seemed like a nightmare. Once I got through it though it was a huge confidence booster since I felt like I had done something I knew the least about and was still foreign to me. I knew  I would be getting my data via an api call and didnt want anything to do with scraping a website. I used the Rest_Client ruby library which to me, seemed like the most effecient route to making the http request. The concept of ruby libraries and how requiring them in your file could open up many possibilities and built in methods was something I didnt fully understand. However, I knew that the data wasn’t the most important part of the project so for this part of the project, I got what i needed and moved on. I had to focus on object oriented ruby. This project had to be culmination of everything I learned. I needed to pull all the stops. I needed to iterate over hashes, iterate over arrays. Manipulate those data types and instantiate objects. So I started at the command line. I wanted the program to have a lot of user functionality instead of just meeting the minimum project requirements of allowing the user to view data. 

To start, I wanted the user to be welcomed and request a prescription. My domain model was that of a pharmacy. Little would the user know that upon requesting a prescription they were really instantiating a prescription object. Upon instantiation, not one, but two api calls would be made. I had to make two because for the purposes of this program, I needed three significant pieces of data: an ID number for the prescription along with the prescription name. In the Api documentation I found a link for these two pieces of information but it did not contain the third piece of information I needed: a description. The description would detail aroma, flavor and side effects of the medicinal cannabis prescription that was prescribed. For that I needed to make a separate api call. Upon instantiation, the object is initialized with a call to a method that makes an api call. That api call method has another method in it being called that makes the call for the description data. The return value of that initialize is a hash with the combined data of both calls and then finally a method gets called which sets the value in that hash to attr_accessors of my prescription object. 

The Cli then asks the user for more input which allows the user to set notes for their prescription. What they are actually doing is setting a value to the “notes” property of that prescription object. They also set a value to the rating property of that prescription object. Both the rating property and the notes property of the prescription object are initialized without any values and then those values are set in the command line, which I thought to be really neat. 

I have to say that I am very proud of my cli gem. Yes we were supplied a list of many Api’s to choose from. I went out and got my own. We were required to make one api call. I made two. At the bare minimum the Cli should allow the user to view data via an Api call. I allowed the user to get data, while maintaining specificity for my domain model where user input and the return that the user gets after input is very similar to how an interaction would go down at an actual pharmacy. Lastly, I allow the user to set properties to these prescription objects that they can view from right inside the command line and this process can be repeated however many times while maintaining a high level of customization by the user. 
 
This project really made me feel like anything is possible with ruby despite the fact I really know only a fraction of it. The beauty of ruby is that you can set a variable equal to anything including the return value of a method. This will allow you to chain methods together and create a lot of flow in your program. The same way an object is very powerful when assigned to a variable, when passed through as an argument, so are methods themselves. An object’s “initialize is where we combine the power of the two. Setting an object with an initialize or a callback method pulls the trigger on a lot of code or at least creates the possibility of pulling the trigger on a lot of code. Before I used to think of the word “computing” as something that only related to numbers. But in the callback method of an object, there is a lot of computing that can be done. In my case I fed it an argument which would be equal to user input. That user input is then used to equal another variable which is taken in as an argument for an api call and gets interpolated (interpolation is required because user input could be many things) to then return data. Despite all of the computing going on, I was still able to abstract away a lot of the code in my program which is another thing I am very proud of. I hope you get a chance to check out my gem! 

Here is a link where I demo my Pharmacy CLI:


https://www.youtube.com/watch?v=ELIi3egHeD0
